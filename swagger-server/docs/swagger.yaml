swagger: "2.0"
info:
  description: "The API document for the Profinity"
  version: "1.0.0"
  title: "Swagger Profinity"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: "Vehicles"
  description: "Return the information about an organisation vehicles"
- name: "Motor Controllers"
  description: "Return the information about an organisation motor controllers"
- name: "Motor State"
  description: "Return the information about the motor state of an controller"
- name: "Charger"
  description: "Return the information about the charger of a vehicle"
- name: "Charger State"
  description: "Return the information about the charger state of a charger"
- name: "Battery Management Unit (BMU)"
  description: "Return the information about the battery management unit of a vehicle"
- name: "Battery State of Health (SOh)"
  description: "Return the information about the State of Health of a battery"
- name: "Cell Monitor Unit (CMU)"
  description: "Return the information about the Cell Monitor Unit of a batter"
- name: "Cell State of Health"
  description: "Return the information about the state of health of a cell"
- name: "Cells"
  description: "Return the information about the cells of a battery"  
- name: "Cell State"
  description: "Return the information about the state of a cell"
- name: "Subscription"
  description: "Handel subscription to object of interest for the user"
- name: Organisations
  description: Return information related to organisations
- name: Workspaces
  description: Return information related to workspaces including individual workspaces, and users and vehicles within that workspace
- name: Systems
  description: Return information regarding a battery system
- name: Users
  description: Return information regarding users
schemes:
- "https"
- "http"
paths:
  /users/search:
    get:
      tags:
      - Users
      summary: Return users matching search parameters
      description: ""
      operationId: getUserBySearchTerm
      parameters:
      - in: query
        name: firstName
        type: string
        description: a first name
      - in: query
        name: lastName
        type: string
        description: a last name
      responses:
        200:
          description: Successful request
  /users/{userId}:
    get:
      tags:
      - Users
      summary: Return the user matching the user id
      description: ""
      operationId: getUserByUserId
      parameters:
      - in: path
        name: userId
        type: string
        description: the UUID of a specific user
        required: true
      responses:
        200:
          description: Successful request
  /workspaces/{workspaceId}:
    get:
      tags:
      - Workspaces
      summary: Return information about the workspace
      description: ""
      operationId: getWorkspace
      parameters:
      - in: path
        type: integer
        name: workspaceId
        description: The id of a specific workspace
        required: true
      responses:
        "200":
          description: Successful request
          schema:
            $ref: "#/definitions/Workspace"
  /systems/{systemId}/devices:
    get:
      tags:
      - Systems
      summary: Return a list of all devices attached to the battery system
      description: ""
      operationId: getSystemDevices
      parameters:
      - in: path
        type: integer
        name: systemId
        description: the id of a specific system
        required: true
      responses:
        200:
          description: "Successful request"
  /systems/{systemId}/storagedevices:
    get:
      tags:
      - Systems
      summary: Return a list of all storage devices attached to the battery system
      description: ""
      operationId: getSystemStorageDevices
      parameters:
      - in: path
        type: integer
        name: systemId
        description: the id of a specific system
        required: true
      responses:
        200:
          description: "Successful request"
  /systems/{systemId}/storagedevices/{storageUnitId}:
    get:
      tags:
      - Systems
      summary: Reutrn detaisl about a specific storage device attached to a battery system
      description: ""
      operationId: getSystemStorageDeviceById
      parameters:
      - in: path
        type: integer
        name: systemId
        description: The id of a specific system
        required: true
      - in: path
        type: integer
        name: storageUnitId
        description: the id of a specific storage unit
        required: true
      responses:
        200:
          description: "Successful request"
  /systems/{systemId}/storagedevices/{storageUnitId}/history:
    get:
      tags:
      - Systems
      summary: Return the storage history of the storage unit between the specified date
      description: ""
      operationId: getSystemStorageHistoryByUnitId
      parameters:
      - in: path
        type: integer
        name: systemId
        description: The id of a specific system
        required: true
      - in: path
        type: integer
        name: storageUnitId
        description: the id of a specific storage unit
        required: true
      - in: query
        type: string
        name: from
        description: the inclusive 'from' date time in UTC format
        required: true
      - in: query
        type: string
        name: to
        description: the inclusive 'to' date time in UTC format
        required: true
      responses:
        200:
          description: "Successful request"
  /systems/{systemId}/consumerdevices:
    get:
      tags:
      - Systems
      summary: Return a list of all power Consumption devices attached to the battery system
      description: ""
      operationId: getSystemConsumerDevices
      parameters:
      - in: path
        type: integer
        name: system id
        description: the id of a specific system
        required: true
      responses:
        200:
          description: "Successful request"
  /systems/{systemId}/consumerdevices/{consumerUnitId}:
    get:
      tags:
      - Systems
      summary: Return details about a specific consumer device attached to a battery system
      description: ""
      operationId: getSystemConsumerDeviceById
      parameters:
      - in: path
        type: integer
        name: systemId
        description: The id of a specific system
        required: true
      - in: path
        type: integer
        name: consumerUnitId
        description: the id of a specific consumer unit
        required: true
      responses:
        200:
          description: "Successful request"
  /systems/{systemId}/consumerdevices/{consumerUnitId}/history:
    get:
      tags:
      - Systems
      summary: Return the consumption history of the consumer unit between the specified date
      description: ""
      operationId: getSystemConsumerHistoryByUnitId
      parameters:
      - in: path
        type: integer
        name: systemId
        description: The id of a specific system
        required: true
      - in: path
        type: integer
        name: consumerUnitId
        description: the id of a specific consumption unit
        required: true
      - in: query
        type: string
        name: from
        description: the inclusive 'from' date time in UTC format
        required: true
      - in: query
        type: string
        name: to
        description: the inclusive 'to' date time in UTC format
        required: true
      responses:
        200:
          description: "Successful request"
  /systems/{systemId}/producerdevices:
    get:
      tags:
      - Systems
      summary: Return a list of all power producer devices attached to the battery system
      description: ""
      operationId: getSystemProducerDevices
      parameters:
      - in: path
        type: integer
        name: system id
        description: the id of a specific system
        required: true
      responses:
        200:
          description: "Successful request"
  /systems/{systemId}/producerdevices/{producerUnitId}:
    get:
      tags:
      - Systems
      summary: Return details about a specific producer device attached to a battery system
      description: ""
      operationId: getSystemProducerDeviceById
      parameters:
      - in: path
        type: integer
        name: systemId
        description: The id of a specific system
        required: true
      - in: path
        type: integer
        name: producerUnitId
        description: the id of a specific producer unit
        required: true
      responses:
        200:
          description: "Successful request"
  /systems/{systemId}/producerdevices/{producerUnitId}/history:
    get:
      tags:
      - Systems
      summary: Return the consumption history of the producer unit between the specified date
      description: ""
      operationId: getSystemConsumerHistoryByUnitId
      parameters:
      - in: path
        type: integer
        name: systemId
        description: The id of a specific system
        required: true
      - in: path
        type: integer
        name: producerUnitId
        description: the id of a specific conproducer unit
        required: true
      - in: query
        type: string
        name: from
        description: the inclusive 'from' date time in UTC format
        required: true
      - in: query
        type: string
        name: to
        description: the inclusive 'to' date time in UTC format
        required: true
      responses:
        200:
          description: "Successful request"
  /organisations/{organisationId}/systems:
    get:
      tags:
      - Organisations
      summary: Return the information about all of the battery systems of an organisation
      description: ""
      operationId: getSystemsByOrganisationId
      parameters:
      - in: path
        type: integer
        name: organisationId
        description: An organisation's unique id
        required: true
      responses:
        "200":
          description: "Successful request"
          schema:
            $ref: "#/definitions/Vehicles"
      # security:
      # - petstore_auth:
      #   - "write:pets"
      #   - "read:pets"
  #   post:
  #     tags:
  #     - Systems
  #     summary: Add a new system to the organisation
  #     description: ""
  #     operationId: "postVehicles"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "string"
  #       name: "organisation"
  #       description: "The name of the organisation"
  #       required: true
  #     - in: "body"
  #       name: "body"
  #       description: "An array of Vehicle objects"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/Vehicles"
  #     responses:
  #       "200":
  #         description: "Successful request"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  # /{organisation}/{systemId}:
  #   get:
  #     tags:
  #     - "Vehicles"
  #     summary: "Return the information about a vehicle from an organisation"
  #     description: ""
  #     operationId: "getVehicle"
  #     parameters:
  #     - in: "string"
  #       name: "organisation"
  #       description: "The name of the organisation"
  #       required: true
  #     - in: "integer"
  #       name: "vehicleId"
  #       description: "The motor controller ID"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         schema:
  #           $ref: "#/definitions/Vehicle"
      # security:
      # - petstore_auth:
      #   - "write:pets"
      #   - "read:pets"
    # put:
    #   tags:
    #   - "Vehicles"
    #   summary: "Update an existing vehicle information"
    #   description: ""
    #   operationId: "updateVehicle"
    #   consumes:
    #   - "application/json"
    #   - "application/xml"
    #   produces:
    #   - "application/xml"
    #   - "application/json"
    #   parameters:
    #   - in: "string"
    #     name: "organisation"
    #     description: "The name of the organisation"
    #     required: true
    #   - in: "integer"
    #     name: "vehcileId"
    #     description: "The vehicle ID"
    #     required: true
    #   - in: "body"
    #     name: "body"
    #     description: "A new vehicle object with the updated properties"
    #     required: true
    #     schema:
    #       $ref: "#/definitions/Vehicle"
    #   responses:
    #     "200":
    #       description: "Successful request"
      # security:
      # - petstore_auth:
      #   - "write:pets"
      #   - "read:pets"
  # /{organisation}/motor-controllers:
  #   get:
  #     tags:
  #     - "Motor Controllers"
  #     summary: "Return the information about all of the motor controllers from an organisation"
  #     description: ""
  #     operationId: "getMotorControllers"
  #     parameters:
  #     - in: "string"
  #       name: "organisation"
  #       description: "The name of the organisation"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         schema:
  #           $ref: "#/definitions/MotorControllers"
      # security:
      # - petstore_auth:
      #   - "write:pets"
      #   - "read:pets"
  #   post:
  #     tags:
  #     - "Motor Controllers"
  #     summary: "Add new motor controllers to the organisation"
  #     description: ""
  #     operationId: "postMotorControllers"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "string"
  #       name: "organisation"
  #       description: "The name of the organisation"
  #       required: true
  #     - in: "body"
  #       name: "body"
  #       description: "An array of motor controller object IDs"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/MotorControllers"
  #     responses:
  #       "200":
  #         description: "Successful request"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  # /{organisation}/{motorControllerId}:
  #   get:
  #     tags:
  #     - "Motor Controllers"
  #     summary: "Return the information about a motor controller from an organisation"
  #     description: ""
  #     operationId: "getMotoController"
  #     parameters:
  #     - in: "string"
  #       name: "organisation"
  #       description: "The name of the organisation"
  #       required: true
  #     - in: "integer"
  #       name: "motorControllerId"
  #       description: "The motor controller ID"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         schema:
  #           $ref: "#/definitions/MotorController"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  #   put:
  #     tags:
  #     - "Motor Controllers"
  #     summary: "Update an existing motor controller information"
  #     description: ""
  #     operationId: "updateMotorController"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "string"
  #       name: "organisation"
  #       description: "The name of the organisation"
  #       required: true
  #     - in: "integer"
  #       name: "motorControllerId"
  #       description: "The motor controller ID"
  #       required: true
  #     - in: "body"
  #       name: "body"
  #       description: "A new motor controller object with the updated properties"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/MotorController"
  #     responses:
  #       "200":
  #         description: "Successful request"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  # /{vehcileId}/bmus:
  #   get:
  #     tags:
  #     - "Battery Management Unit (BMU)"
  #     summary: "Return the information about all the battery management unit of a vehicle"
  #     description: ""
  #     operationId: "getBatteryManagementUnits"
  #     parameters:
  #     - in: "integer"
  #       name: "vehicleId"
  #       description: "The vehicle ID"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         schema:
  #           $ref: "#/definitions/BMUs"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  #   post:
  #     tags:
  #     - "Battery Management Unit (BMU)"
  #     summary: "Add new battery management units to the vehcile"
  #     description: ""
  #     operationId: "postBatteryManagementUnits"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "string"
  #       name: "vehicleId"
  #       description: "The vehcile ID"
  #       required: true
  #     - in: "body"
  #       name: "body"
  #       description: "An array of battery management unit object IDs"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/BMUs"
  #     responses:
  #       "200":
  #         description: "Successful request"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  # /{vehcileId}/{bmuId}:
  #   get:
  #     tags:
  #     - "Battery Management Unit (BMU)"
  #     summary: "Return the information about the battery management unit of a vehicle"
  #     description: ""
  #     operationId: "getBatteryManagementUnit"
  #     parameters:
  #     - in: "integer"
  #       name: "vehicleId"
  #       description: "The vehicle ID"
  #       required: true
  #     - in: "integer"
  #       name: "bmuId"
  #       description: "The Battery Management Unit ID"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         schema:
  #           $ref: "#/definitions/BMU"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  #   put:
  #     tags:
  #     - "Battery Management Unit (BMU)"
  #     summary: "Update an existing battery management unit information"
  #     description: ""
  #     operationId: "updateBatteryManagementUnit"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "integer"
  #       name: "vehcileId"
  #       description: "The vehcile ID"
  #       required: true
  #     - in: "integer"
  #       name: "bmuId"
  #       description: "The Battery Management Unit ID"
  #       required: true
  #     - in: "body"
  #       name: "body"
  #       description: "A new battery management unit object with the updated properties"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/BMU"
  #     responses:
  #       "200":
  #         description: "Successful request"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  # /{motorId}/motor-state:
  #   get:
  #     tags:
  #     - "Motor State"
  #     summary: "Return the information about the motor state of a motor controller"
  #     description: ""
  #     operationId: "getMotorState"
  #     parameters:
  #     - in: "integer"
  #       name: "motorId"
  #       description: "The motor ID"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         schema:
  #           $ref: "#/definitions/MotorState"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  #   put:
  #     tags:
  #     - "Motor State"
  #     summary: "Update an existing motor state of a motor controller"
  #     description: ""
  #     operationId: "updateMotorState"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "integer"
  #       name: "motorId"
  #       description: "The motor ID"
  #       required: true
  #     - in: "body"
  #       name: "body"
  #       description: "A new battery management unit object with the updated properties"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/MotorState"
  #     responses:
  #       "200":
  #         description: "Successful request"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  # /{vehicleId}/chargers:
  #   get:
  #     tags:
  #     - "Charger"
  #     summary: "Return the information about all the charger of a vehcile"
  #     description: ""
  #     operationId: "getChargers"
  #     parameters:
  #     - in: "integer"
  #       name: "vehcileId"
  #       description: "The vehicle ID"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         schema:
  #           $ref: "#/definitions/Charger"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  #   post:
  #     tags:
  #     - "Charger"
  #     summary: "Add chargers to a vehcile"
  #     description: ""
  #     operationId: "postChargers"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "integer"
  #       name: "vehcileId"
  #       description: "The vehcile ID"
  #       required: true
  #     - in: "body"
  #       name: "body"
  #       description: "An array of charger objects"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/Chargers"
  #     responses:
  #       "200":
  #         description: "Successful request"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  # /{vehicleId}/{chargerId}:
  #   get:
  #     tags:
  #     - "Charger"
  #     summary: "Return the information about a charger of a vehcile"
  #     description: ""
  #     operationId: "getCharger"
  #     parameters:
  #     - in: "integer"
  #       name: "vehcileId"
  #       description: "The vehicle ID"
  #       required: true
  #     - in: "integer"
  #       name: "chargerId"
  #       description: "The charger ID"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         schema:
  #           $ref: "#/definitions/Charger"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  #   put:
  #     tags:
  #     - "Charger"
  #     summary: "Update an existing charger information of a vehcile"
  #     description: ""
  #     operationId: "updateCharger"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "integer"
  #       name: "vehcileId"
  #       description: "The vehcile ID"
  #       required: true
  #     - in: "integer"
  #       name: "chargerId"
  #       description: "The charger ID"
  #       required: true
  #     - in: "body"
  #       name: "body"
  #       description: "A new charger object with the updated properties"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/Charger"
  #     responses:
  #       "200":
  #         description: "Successful request"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  # /{chargerId}/charger-state:
  #   get:
  #     tags:
  #     - "Charger State"
  #     summary: "Return the information about the charger state of a charger"
  #     description: ""
  #     operationId: "getChargerState"
  #     parameters:
  #     - in: "integer"
  #       name: "chargerId"
  #       description: "The charger ID"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         schema:
  #           $ref: "#/definitions/ChargerState"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  #   put:
  #     tags:
  #     - "Charger State"
  #     summary: "Update an existing charger state of a charger"
  #     description: ""
  #     operationId: "updateChargerState"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "integer"
  #       name: "chargerId"
  #       description: "The charger ID"
  #       required: true
  #     - in: "body"
  #       name: "body"
  #       description: "A new charger state object with the updated properties"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/ChargerState"
  #     responses:
  #       "200":
  #         description: "Successful request"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  # /{vehicleId}/bmu/battersoh:
  #   get:
  #     tags:
  #     - "Battery State of Health (SOh)"
  #     summary: "Return the information about the health state of a battery"
  #     description: ""
  #     operationId: "getBatteryStateOfHealth"
  #     parameters:
  #     - in: "integer"
  #       name: "vehcileId"
  #       description: "The vehicle ID"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         schema:
  #           $ref: "#/definitions/BatterySOh"
      # security:
      # - petstore_auth:
      #   - "write:pets"
      #   - "read:pets"
  #   put:
  #     tags:
  #     - "Battery State of Health (SOh)"
  #     summary: "Update an existing health state of a battery"
  #     description: ""
  #     operationId: "updateBatteryStateOfHealth"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "integer"
  #       name: "vehicleId"
  #       description: "The vehcile ID"
  #       required: true
  #     - in: "body"
  #       name: "body"
  #       description: "A new battery state of health object with the updated properties"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/BatterySOh"
  #     responses:
  #       "200":
  #         description: "Successful request"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  # /{bmuId}/cmus:
  #   get:
  #     tags:
  #     - "Cell Monitor Unit (CMU)"
  #     summary: "Return the information about all the cell monitor unit of a battery management unit"
  #     description: ""
  #     operationId: "getCellMonitorUnits"
  #     parameters:
  #     - in: "integer"
  #       name: "bmuId"
  #       description: "The Battery Management Unit ID"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         schema:
  #           $ref: "#/definitions/CMUs"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  #   post:
  #     tags:
  #     - "Cell Monitor Unit (CMU)"
  #     summary: "Add new cell monitor units to the battery management unit"
  #     description: ""
  #     operationId: "postCellMonitorUnits"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "string"
  #       name: "bmuId"
  #       description: "The Battery Management Unit ID"
  #       required: true
  #     - in: "body"
  #       name: "body"
  #       description: "An array of cell monitory unit IDs"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/CMUs"
  #     responses:
  #       "200":
  #         description: "Successful request"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  # /{bmuId}/{cmuId}:
  #   get:
  #     tags:
  #     - "Cell Monitor Unit (CMU)"
  #     summary: "Return the information about a cell monitor unit of a battery management unit"
  #     description: ""
  #     operationId: "getCellMonitorUnit"
  #     parameters:
  #     - in: "integer"
  #       name: "bmuId"
  #       description: "The Battery Management Unit ID"
  #       required: true
  #     - in: "integer"
  #       name: "cmuId"
  #       description: "The Cell Monitor Unit ID"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         schema:
  #           $ref: "#/definitions/CMU"
      # security:
      # - petstore_auth:
      #   - "write:pets"
      #   - "read:pets"
  #   put:
  #     tags:
  #     - "Cell Monitor Unit (CMU)"
  #     summary: "Update an existing cell monitor unit information"
  #     description: ""
  #     operationId: "updateCellMonitorUnit"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "integer"
  #       name: "bmuId"
  #       description: "The Battery Management Unit ID"
  #       required: true
  #     - in: "integer"
  #       name: "cmuId"
  #       description: "The Cell Monitor Unit ID"
  #       required: true
  #     - in: "body"
  #       name: "body"
  #       description: "A new cell monitor unit object with the updated properties"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/CMU"
  #     responses:
  #       "200":
  #         description: "Successful request"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  # /{bmuId}/{cmuId}/cellsoh:
  #   get:
  #     tags:
  #     - "Cell State of Health"
  #     summary: "Return the inforamtion about the health state of a cell"
  #     description: ""
  #     operationId: "getCellStateOfHealth"
  #     parameters:
  #     - in: "integer"
  #       name: "bmuId"
  #       description: "The Battery Management Unit ID"
  #       required: true
  #     - in: "integer"
  #       name: "cmuId"
  #       description: "The Cell Monitor Unit ID"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         schema:
  #           $ref: "#/definitions/CellSoh"
      # security:
      # - petstore_auth:
      #   - "write:pets"
      #   - "read:pets"
  #   put:
  #     tags:
  #     - "Cell State of Health"
  #     summary: "Update an existing health state of a cell"
  #     description: ""
  #     operationId: "updateCellStateOfHealth"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "integer"
  #       name: "bmuId"
  #       description: "The Battery Management Unit ID"
  #       required: true
  #     - in: "integer"
  #       name: "cmuId"
  #       description: "The Cell Monitor Unit ID"
  #       required: true
  #     - in: "body"
  #       name: "body"
  #       description: "A new battery state of health object with the updated properties"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/CellSoh"
  #     responses:
  #       "200":
  #         description: "Successful request"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  # /{cmuId}/cells:
  #   get:
  #     tags:
  #     - "Cells"
  #     summary: "Return the information about all the cell of a cell monitor unit"
  #     description: ""
  #     operationId: "getCells"
  #     parameters:
  #     - in: "integer"
  #       name: "cmuId"
  #       description: "The Cell Monitor Unit ID"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         schema:
  #           $ref: "#/definitions/Cells"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  #   post:
  #     tags:
  #     - "Cells"
  #     summary: "Add new cells to the cell monitor unit"
  #     description: ""
  #     operationId: "postCells"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "string"
  #       name: "cmuId"
  #       description: "The Cell Monitor Unit ID"
  #       required: true
  #     - in: "body"
  #       name: "body"
  #       description: "An array of cell IDs"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/Cells"
  #     responses:
  #       "200":
  #         description: "Successful request"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  # /{cmuId}/{cellId}:
  #   get:
  #     tags:
  #     - "Cells"
  #     summary: "Return the information about a cell of a cell monitor unit"
  #     description: ""
  #     operationId: "getCell"
  #     parameters:
  #     - in: "integer"
  #       name: "cmuId"
  #       description: "The Cell Monitor Unit ID"
  #       required: true
  #     - in: "integer"
  #       name: "cellId"
  #       description: "The Cell ID"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         schema:
  #           $ref: "#/definitions/Cell"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  #   put:
  #     tags:
  #     - "Cells"
  #     summary: "Update an existing cell information"
  #     description: ""
  #     operationId: "updateCell"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "integer"
  #       name: "cmuId"
  #       description: "The Cell Monitor Unit ID"
  #       required: true
  #     - in: "integer"
  #       name: "cellId"
  #       description: "The Cell ID"
  #       required: true
  #     - in: "body"
  #       name: "body"
  #       description: "A new cell object with the updated properties"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/Cell"
  #     responses:
  #       "200":
  #         description: "Successful request"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  # /{cellId}/cell-state:
  #   get:
  #     tags:
  #     - "Cell State"
  #     summary: "Return the information about the cell state of a cell"
  #     description: ""
  #     operationId: "getCellState"
  #     parameters:
  #     - in: "integer"
  #       name: "cellId"
  #       description: "The cell ID"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         schema:
  #           $ref: "#/definitions/CellState"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  #   put:
  #     tags:
  #     - "Cell State"
  #     summary: "Update an existing cell state of a cell"
  #     description: ""
  #     operationId: "updateCellState"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "integer"
  #       name: "cellId"
  #       description: "The cell ID"
  #       required: true
  #     - in: "body"
  #       name: "body"
  #       description: "A new cell state object with the updated properties"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/CellState"
  #     responses:
  #       "200":
  #         description: "Successful request"
  # /subscription/{userId}/organisation:
  #   get:
  #     tags:
  #     - "Subscription"
  #     summary: "Return a list of organisation that the account subscribed to"
  #     description: ""
  #     operationId: "getOrganisationsByUserId"
  #     parameters:
  #     - in: "integer"
  #       name: "userId"
  #       description: "The user ID"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         # schema:
  #         #   $ref: "#/definitions/CellState"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  # /subscription/{userId}/{organisationId}:
  #   get:
  #     tags:
  #     - "Subscription"
  #     summary: "Return information about the subscription of a user to an organisation"
  #     description: ""
  #     operationId: "getOrganisationById"
  #     parameters:
  #     - in: "integer"
  #       name: "userId"
  #       description: "The user ID"
  #       required: true
  #     - in: "integer"
  #       name: "organisationId"
  #       description: "The organisation ID"
  #       required: true
  #     responses:
  #       "200":
  #         description: "Successful request"
  #         # schema:
  #         #   $ref: "#/definitions/CellState"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  #   put:
  #     tags:
  #     - "Subscription"
  #     summary: "Add an organisation into the user organisation subscription list"
  #     description: ""
  #     operationId: "updateOrganisationFromUserSubscriptionList"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "integer"
  #       name: "userId"
  #       description: "The user ID"
  #       required: true
  #     - in: "integer"
  #       name: "organisationId"
  #       description: "The organisation ID"
  #       required: true
  #       # schema:
  #       #   $ref: "#/definitions/CellState"
  #     responses:
  #       "200":
  #         description: "Successful request"
  #     # security:
  #     # - petstore_auth:
  #     #   - "write:pets"
  #     #   - "read:pets"
  #   delete:
  #     tags:
  #     - "Subscription"
  #     summary: "Remove an organisation into the user organisation subscription list"
  #     description: ""
  #     operationId: "removeOrganisationFromUserSubscriptionList"
  #     consumes:
  #     - "application/json"
  #     - "application/xml"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "integer"
  #       name: "userId"
  #       description: "The user ID"
  #       required: true
  #     - in: "integer"
  #       name: "organisationId"
  #       description: "The organisation ID"
  #       required: true
  #       # schema:
  #       #   $ref: "#/definitions/CellState"
  #     responses:
  #       "200":
  #         description: "Successful request"
      # security:
      # - petstore_auth:
      #   - "write:pets"
      #   - "read:pets"
#   /user:
#     post:
#       tags:
#       - "user"
#       summary: "Create user"
#       description: "This can only be done by the logged in user."
#       operationId: "createUser"
#       produces:
#       - "application/xml"
#       - "application/json"
#       parameters:
#       - in: "body"
#         name: "body"
#         description: "Created user object"
#         required: true
#         schema:
#           $ref: "#/definitions/User"
#       responses:
#         default:
#           description: "successful operation"
#   /user/createWithArray:
#     post:
#       tags:
#       - "user"
#       summary: "Creates list of users with given input array"
#       description: ""
#       operationId: "createUsersWithArrayInput"
#       produces:
#       - "application/xml"
#       - "application/json"
#       parameters:
#       - in: "body"
#         name: "body"
#         description: "List of user object"
#         required: true
#         schema:
#           type: "array"
#           items:
#             $ref: "#/definitions/User"
#       responses:
#         default:
#           description: "successful operation"
#   /user/createWithList:
#     post:
#       tags:
#       - "user"
#       summary: "Creates list of users with given input array"
#       description: ""
#       operationId: "createUsersWithListInput"
#       produces:
#       - "application/xml"
#       - "application/json"
#       parameters:
#       - in: "body"
#         name: "body"
#         description: "List of user object"
#         required: true
#         schema:
#           type: "array"
#           items:
#             $ref: "#/definitions/User"
#       responses:
#         default:
#           description: "successful operation"
#   /user/login:
#     get:
#       tags:
#       - "user"
#       summary: "Logs user into the system"
#       description: ""
#       operationId: "loginUser"
#       produces:
#       - "application/xml"
#       - "application/json"
#       parameters:
#       - name: "username"
#         in: "query"
#         description: "The user name for login"
#         required: true
#         type: "string"
#       - name: "password"
#         in: "query"
#         description: "The password for login in clear text"
#         required: true
#         type: "string"
#       responses:
#         "200":
#           description: "successful operation"
#           schema:
#             type: "string"
#           headers:
#             X-Rate-Limit:
#               type: "integer"
#               format: "int32"
#               description: "calls per hour allowed by the user"
#             X-Expires-After:
#               type: "string"
#               format: "date-time"
#               description: "date in UTC when token expires"
#         "400":
#           description: "Invalid username/password supplied"
#   /user/logout:
#     get:
#       tags:
#       - "user"
#       summary: "Logs out current logged in user session"
#       description: ""
#       operationId: "logoutUser"
#       produces:
#       - "application/xml"
#       - "application/json"
#       parameters: []
#       responses:
#         default:
#           description: "successful operation"
#   /user/{username}:
#     get:
#       tags:
#       - "user"
#       summary: "Get user by user name"
#       description: ""
#       operationId: "getUserByName"
#       produces:
#       - "application/xml"
#       - "application/json"
#       parameters:
#       - name: "username"
#         in: "path"
#         description: "The name that needs to be fetched. Use user1 for testing. "
#         required: true
#         type: "string"
#       responses:
#         "200":
#           description: "successful operation"
#           schema:
#             $ref: "#/definitions/User"
#         "400":
#           description: "Invalid username supplied"
#         "404":
#           description: "User not found"
#     put:
#       tags:
#       - "user"
#       summary: "Updated user"
#       description: "This can only be done by the logged in user."
#       operationId: "updateUser"
#       produces:
#       - "application/xml"
#       - "application/json"
#       parameters:
#       - name: "username"
#         in: "path"
#         description: "name that need to be updated"
#         required: true
#         type: "string"
#       - in: "body"
#         name: "body"
#         description: "Updated user object"
#         required: true
#         schema:
#           $ref: "#/definitions/User"
#       responses:
#         "400":
#           description: "Invalid user supplied"
#         "404":
#           description: "User not found"
#     delete:
#       tags:
#       - "user"
#       summary: "Delete user"
#       description: "This can only be done by the logged in user."
#       operationId: "deleteUser"
#       produces:
#       - "application/xml"
#       - "application/json"
#       parameters:
#       - name: "username"
#         in: "path"
#         description: "The name that needs to be deleted"
#         required: true
#         type: "string"
#       responses:
#         "400":
#           description: "Invalid username supplied"
#         "404":
#           description: "User not found"
# securityDefinitions:
#   petstore_auth:
#     type: "oauth2"
#     authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
#     flow: "implicit"
#     scopes:
#       write:pets: "modify pets in your account"
#       read:pets: "read your pets"
#   api_key:
#     type: "apiKey"
#     name: "api_key"
#     in: "header"
definitions:
  # Charger:
  #   type: "object"
  #   properties:
  #     chargerId:
  #       type: "integer"
  #       format: "int64"
  #     totalPower:
  #       type: "integer"
  #       format: "int64"
  #     powerExport:
  #       type: "integer"
  #       format: "int64"
  #     externalPower:
  #       type: "integer"
  #       format: "int64"
  #   xml:
  #     name: "Charger"
  # Chargers:
  #   type: "object"
  #   properties:
  #     chargerIds:
  #       type: "array"
  #       items:
  #         type: "integer"
  #   xml:
  #     name: "Chargers"
  # ChargerState:
  #   type: "object"
  #   properties:
  #     current:
  #       type: "integer"
  #       format: "int64"
  #     voltage:
  #       type: "integer"
  #       format: "int64"
  #     temperature:
  #       type: "integer"
  #       format: "int64"
  #     pointOfTime:
  #       type: "integer"
  #       format: "int64"
  #   xml:
  #     name: "ChargerState"
  # MotorController:
  #   type: "object"
  #   properties:
  #     motorId:
  #       type: "integer"
  #       format: "int64"
  #     averageTemp:
  #       type: "integer"
  #       format: "int64"
  #     voltage:
  #       type: "integer"
  #       format: "int64"
  #     amps:
  #       type: "integer"
  #       format: "int64"
  #   xml:
  #     name: "MotorController"
  # MotorControllers:
  #   type: "object"
  #   properties:
  #     motorIds:
  #       type: "string"
  #   xml:
  #     name: "MotorControllers"
  # MotorState:
  #   type: "object"
  #   properties:
  #     current:
  #       type: "integer"
  #       format: "int64"
  #     voltage:
  #       type: "integer"
  #       format: "int64"
  #     tempurature:
  #       type: "integer"
  #       format: "int64"
  #     pointOfTime:
  #       type: "integer"
  #       format: "int64"
  #   xml:
  #     name: "MotorState"
  # BMUs:
  #   type: "object"
  #   properties:
  #     bmuId:
  #       type: "array"
  #       items:
  #         type: "integer"
  #   xml:
  #     name: "BMUs"
  # BMU:
  #   type: "object"
  #   properties:
  #     bmuId:
  #       type: "integer"
  #       format: "int64"
  #     stateOfHealth:
  #       type: "string"
  #     dateManucatured:
  #       type: "string"
  #     mainFacility:
  #       type: "string"
  #     type:
  #       type: "string"
  #     count:
  #       type: "integer"
  #       format: "int64"
  #   xml:
  #     name: "BMU"
  # BatterySOh:
  #   type: "object"
  #   properties:
  #     current:
  #       type: "integer"
  #       format: "int64"
  #     voltage:
  #       type: "integer"
  #       format: "int64"
  #     tempurature:
  #       type: "integer"
  #       format: "int64"
  #     pointOfTime:
  #       type: "integer"
  #       format: "int64"
  #   xml:
  #     name: "BatterySOh"
  # CMUs:
  #   type: "object"
  #   properties:
  #     cmuId:
  #       type: "array"
  #       items:
  #         type: "integer"
  #   xml:
  #     name: "CMUs"
  # CMU:
  #   type: "object"
  #   properties:
  #     cmuId:
  #       type: "integer"
  #       format: "int64"
  #     stateOfHealth:
  #       type: "string"
  #     dateManucatured:
  #       type: "string"
  #     mainFacility:
  #       type: "string"
  #   xml:
  #     name: "CMU"
  # CellSoh:
  #   type: "object"
  #   properties:
  #     current:
  #       type: "integer"
  #       format: "int64"
  #     voltage:
  #       type: "integer"
  #       format: "int64"
  #     tempurature:
  #       type: "integer"
  #       format: "int64"
  #     pointOfTime:
  #       type: "integer"
  #       format: "int64"
  #   xml:
  #     name: "CellSoh"
  # Cells:
  #   type: "object"
  #   properties:
  #     cellId:
  #       type: "array"
  #       items:
  #         type: "integer"
  #   xml:
  #     name: "Cells"
  # Cell:
  #   type: "object"
  #   properties:
  #     cellId:
  #       type: "integer"
  #       format: "int64"
  #     voltageMax:
  #       type: "integer"
  #       format: "int64"
  #     voltageMin:
  #       type: "integer"
  #       format: "int64"
  #     manufacturer:
  #       type: "string"
  #     batch:
  #       type: "string"
  #     dateManucatured:
  #       type: "string"
  #   xml:
  #     name: "Cell"
  # CellState:
  #   type: "object"
  #   properties:
  #     current:
  #       type: "integer"
  #       format: "int64"
  #     voltage:
  #       type: "integer"
  #       format: "int64"
  #     tempurature:
  #       type: "integer"
  #       format: "int64"
  #     pointOfTime:
  #       type: "integer"
  #       format: "int64"
  #   xml:
  #     name: "CellState"
  # Vehicles:
  #   type: "object"
  #   properties:
  #     organisation:
  #       type: "string"
  #       example: "Prohelion"
  #     models:
  #       type: "array"
  #       items:
  #         type: "string"
  #     photoUrls:
  #       type: "array"
  #       xml:
  #         name: "photoUrl"
  #         wrapped: true
  #       items:
  #         type: "string"
  #   xml:
  #     name: "Vehicles"
  # Vehicle:
  #   type: "object"
  #   properties:
  #     vehicleId:
  #       type: "integer"
  #       format: "int64"
  #     organisation:
  #       type: "string"
  #       example: "Prohelion"
  #     model:
  #       type: "string"
  #       example: "BMW"
  #     photoUrls:
  #       type: "array"
  #       xml:
  #         name: "photoUrl"
  #         wrapped: true
  #       items:
  #         type: "string"
  #     status:
  #       type: "string"
  #       description: "status about the vehcile"
  #       enum:
  #       - "available"
  #       - "pending"
  #       - "out of service"
  #   xml:
  #     name: "Vehicle"
  Workspace:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
        example: Team Arrow firmware
      users:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            first name:
              type: string
            last name:
              type: string
      systems:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            




  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"